import React, { useEffect, useState } from 'react';
import styles from './index.module.scss';
import { Form, Input, Button, Message, Upload, Modal } from '@arco-design/web-react';
import { getUserInfo, setUserInfo as fetchSetUserInfo, updatePassword } from '@/api/user';
import { UpdatePasswordInfo, User, UserBasicInfo } from '@/typings/user';
import { BASE_URL } from '@/config/network';
import SkeletonPage from '@/components/Skeleton-Page';
import useToken from '@/hooks/useToken';
import { useNavigate } from 'react-router-dom';

interface UserInfoForm extends UserBasicInfo {
  userAvatar: any;
}

const FormItem = Form.Item;

const Setting = () => {
  const [userInfo, setUserInfo] = useState<User>();
  const [token] = useToken();
  const navigate = useNavigate();

  const load = () => {
    getUserInfo().then(res => {
      setUserInfo(res.data);
    }).catch(err => {
      Message.warning('Êú™ÁôªÂΩïÔºå ‰∏∫‰Ω†Ë∑≥ËΩ¨ÁôªÂΩïÁïåÈù¢');
      navigate('/login');
    });
  };

  const handleUpdatePassword = (data: UpdatePasswordInfo) => {
    updatePassword(data).then(() => {
      Message.success('Êõ¥Êñ∞ÊàêÂäü');
    }).catch(err => {
      Message.success(err.message);
    });
  };

  const handleUpdateInfo= (data: UserInfoForm) => {
    const file = data.userAvatar[0];
    const { url } = file.response.data;
    const info = {
      ...data,
      avatar: url
    };
    fetchSetUserInfo(info).then(() => {
      Message.success('‰øÆÊîπÊàêÂäü„ÄÇ');
      window.location.reload();
    }).catch(err => {
      Message.warning(err.message);
    });
  };

  useEffect(() => {
    load();
  }, []);

  return (
    <div className={styles['setting-page-wrapper']}>
      {
        userInfo ? (
          <>
            <div className={styles['setting-page']}>
              <div className={styles['setting-title']}>
                Settings for <span style={{ color: 'rgb(59, 73, 223)', cursor: 'pointer' }}>{userInfo?.name}</span>
              </div>
              <div className={styles['setting-main']}>
                <h2>Ë¥¶Âè∑Âü∫Êú¨‰ø°ÊÅØ</h2>
                <div>
                  <Form onSubmit={handleUpdatePassword} labelCol={{ offset: 0, span: 3 }} initialValues={userInfo}>
                    <FormItem label='üßî Ë¥¶Âè∑' field="username">
                      <Input value={userInfo?.username} disabled maxLength={20} showWordLimit />
                    </FormItem>
                    <FormItem label='üîë ÂØÜÁ†Å' field="password">
                      <Input type="password" placeholder='ËØ∑ËæìÂÖ•‰Ω†ÁöÑÂØÜÁ†Å' />
                    </FormItem>
                    <FormItem label='üîë Êñ∞ÂØÜÁ†Å' field="newPassword">
                      <Input type="password" placeholder='ËØ∑ËæìÂÖ•‰Ω†Ë¶Å‰øÆÊîπÁöÑÂØÜÁ†Å' maxLength={30} showWordLimit />
                    </FormItem>
                    {/* <FormItem label='Á°ÆËÆ§ÂØÜÁ†Å' field="rePassword">
                      <Input type="password" placeholder='ÂÜçÊ¨°ËæìÂÖ•‰Ω†Ë¶Å‰øÆÊîπÁöÑÂØÜÁ†Å' maxLength={30} showWordLimit />
                    </FormItem> */}
                    <FormItem wrapperCol={{ offset: 3, span: 19 }}>
                      <Button type='primary' htmlType='submit' long>‰øù Â≠ò üòä </Button>
                    </FormItem>
                  </Form>
                </div>
              </div>
              <div className={styles['setting-main']}>
                <h2>Áî®Êà∑‰ø°ÊÅØ</h2>
                <div>
                  <Form labelCol={{ offset: 0, span: 3 }} onSubmit={handleUpdateInfo} initialValues={userInfo}>
                    <FormItem label="Â§¥ÂÉè" field="userAvatar" required>
                      <Upload
                        listType='picture-card'
                        name='file'
                        limit={1}
                        action={`${BASE_URL}/cos/avatar/upload`}
                        defaultFileList=
                          {userInfo.avatar ? [{ name: 'avatar', url: `${userInfo.avatar}`, uid: 'avatar' }] : []}
                        headers={{
                          Authorization: `Bearer ${token}`
                        }}
                        onPreview={(file: any) => {
                          Modal.info({
                            title: 'Preview',
                            content: <img src={file.url || URL.createObjectURL(file.originFile)} style={{maxWidth: '100%'}} > </img>
                          });
                        }}
                      />
                    </FormItem>
                    <FormItem label='Áî®Êà∑Âêç' field="name" required>
                      <Input value="hug" placeholder='ËØ∑ËæìÂÖ•Áî®Êà∑Âêç' maxLength={20} showWordLimit />
                    </FormItem>
                    <FormItem label='ÊâãÊú∫Âè∑' field="phone" required>
                      <Input placeholder='ËØ∑ËæìÂÖ•ÊâãÊú∫Âè∑' maxLength={30} showWordLimit />
                    </FormItem>
                    <FormItem label='ËÅå‰∏ö' field="job_title" required>
                      <Input placeholder='ËØ∑ËæìÂÖ•ËÅå‰∏ö' maxLength={30} showWordLimit />
                    </FormItem>
                    <FormItem label='ÂÖ¨Âè∏' field="company" required>
                      <Input placeholder='ËØ∑ËæìÂÖ•ÂÖ¨Âè∏' maxLength={30} showWordLimit />
                    </FormItem>
                    <FormItem label='‰∏™‰∫∫‰∏ªÈ°µ' field="home_page" required>
                      <Input placeholder='ËØ∑ËæìÂÖ•‰∏™‰∫∫‰∏ªÈ°µ' maxLength={30} showWordLimit />
                    </FormItem>
                    <FormItem label='‰∏™‰∫∫ÁÆÄ‰ªã' field="description" required>
                      <Input placeholder='ËæìÂÖ•‰∏™‰∫∫ÁÆÄ‰ªã' maxLength={30} showWordLimit />
                    </FormItem>
                    <FormItem wrapperCol={{ offset: 3, span: 19 }}>
                      <Button type='primary' htmlType="submit" long>‰øù Â≠ò üòä </Button>
                    </FormItem>
                  </Form>
                </div>
              </div>
            </div>            
          </>
        ) : (
          <SkeletonPage />
        )
      }
    </div>
  );
};

export default Setting;